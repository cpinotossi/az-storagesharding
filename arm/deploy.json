{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "prefix": {
            "defaultValue": "ru",
            "type": "String",
            "metadata": {
                "description": "Prefix which will be added to all components"
            }
        },
        "myip": {
            "type": "String",
            "metadata": {
                "description": "IP whitelist to access the Storage Accounts directly. e.g. xx.xx.xx.xx"
            }
        },

        "location": {
            "type": "string",
            "defaultValue": "westeurope",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "certificationCN": {
            "type": "String",
            "metadata": {
                "description": "CN of the Server Cerificate, same as the Domain name. e.g. www.customer.com"
            }
        },
        "containerName": {
            "defaultValue": "test",
            "type": "String",
            "metadata": {
                "description": "Container Name used inside the Storage Accounts"
            }
        },
        "certificationData": {
            "type": "securestring",
            "metadata": {
                "description": "Base-64 encoded the .pfx file"
            }
        },
        "certificationPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for .pfx certificate"
            }
        }
    },
    "variables": {
        "storageAccountName01": "[concat(parameters('prefix'),'001')]",
        "storageAccountName02": "[concat(parameters('prefix'),'002')]",
        "publicIPName": "[concat(parameters('prefix'),'-pip-001')]",
        "virtualNetworkName": "[concat(parameters('prefix'),'-appgw-vnet')]",
        "subnetName": "[concat(parameters('prefix'),'-appgw-subnet')]",
        "applicationGatewayName": "[concat(parameters('prefix'),'-appgw')]",
        "applicationGatewayBackendAddressPoolName": "[concat(parameters('prefix'),'-appgw-backendpool')]",
        "applicationGatewayBackendHTTPSettingName": "[concat(parameters('prefix'),'-appgw-backendsetting')]",
        "applicationGatewayFrontPortName": "[concat(parameters('prefix'),'-appgw-frontport')]",
        "applicationGatewayFrontIPName": "[concat(parameters('prefix'),'-appgw-frontip')]",
        "applicationGatewayRoutingRuleName": "[concat(parameters('prefix'),'-appgw-routingrule')]",
        "applicationGatewayListenerName": "[concat(parameters('prefix'),'-appgw-listener')]",
        "applicationGatewayProbeName": "[concat(parameters('prefix'),'-appgw-probe')]",
        "vnetRef": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-11-01",
            "name": "[variables('publicIPName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard",
                "tier": "Regional"
            },
            "zones": [
                "1",
                "2",
                "3"
            ],
            "properties": {
                //"ipAddress": "51.124.21.79",
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4,
                "ipTags": []
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-11-01",
            "name": "[variables('virtualNetworkName')]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "172.17.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "172.17.0.0/24",
                            "serviceEndpoints": [
                                {
                                    "service": "Microsoft.Storage",
                                    "locations": [
                                        "[parameters('location')]",
                                        "northeurope"
                                    ]
                                }
                            ],
                            "delegations": [],
                            "privateEndpointNetworkPolicies": "Enabled",
                            "privateLinkServiceNetworkPolicies": "Enabled"
                        }
                    }
                ],
                "virtualNetworkPeerings": [],
                "enableDdosProtection": false
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2020-11-01",
            "name": "[concat(variables('virtualNetworkName'), '/',variables('subnetName'))]",
            "dependsOn": [
                "[variables('vnetRef')]"
            ],
            "properties": {
                "addressPrefix": "172.17.0.0/24",
                "serviceEndpoints": [
                    {
                        "service": "Microsoft.Storage",
                        "locations": [
                            "[parameters('location')]",
                            "northeurope"
                        ]
                    }
                ],
                "delegations": [],
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-01-01",
            "name": "[variables('storageAccountName01')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('subnetRef')]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "routingPreference": {
                    "routingChoice": "InternetRouting",
                    "publishMicrosoftEndpoints": false,
                    "publishInternetEndpoints": false
                },
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": true,
                "allowSharedKeyAccess": true,
                "networkAcls": {
                    "resourceAccessRules": [],
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [
                        {
                            "id": "[variables('subnetRef')]",
                            "action": "Allow",
                            "state": "Succeeded"
                        }
                    ],
                    "ipRules": [
                        {
                            "value": "[parameters('myip')]",
                            "action": "Allow"
                        }
                    ],
                    "defaultAction": "Deny"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Cool"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2021-01-01",
            "name": "[concat(variables('storageAccountName01'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName01'))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2021-01-01",
            "name": "[concat(variables('storageAccountName01'), '/default/', parameters('containerName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName01'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName01'))]"
            ],
            "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "Blob"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-01-01",
            "name": "[variables('storageAccountName02')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('subnetRef')]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "routingPreference": {
                    "routingChoice": "InternetRouting",
                    "publishMicrosoftEndpoints": false,
                    "publishInternetEndpoints": false
                },
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": true,
                "allowSharedKeyAccess": true,
                "networkAcls": {
                    "resourceAccessRules": [],
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [
                        {
                            "id": "[variables('subnetRef')]",
                            "action": "Allow",
                            "state": "Succeeded"
                        }
                    ],
                    "ipRules": [
                        {
                            "value": "[parameters('myip')]",
                            "action": "Allow"
                        }
                    ],
                    "defaultAction": "Deny"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Cool"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2021-01-01",
            "name": "[concat(variables('storageAccountName02'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName02'))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2021-01-01",
            "name": "[concat(variables('storageAccountName02'), '/default/', parameters('containerName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName02'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName02'))]"
            ],
            "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "Blob"
            }
        },
        {
            "type": "Microsoft.Network/applicationGateways",
            "apiVersion": "2020-11-01",
            "name": "[variables('applicationGatewayName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('subnetRef')]",
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName01'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName02'))]"
            ],
            "zones": [
                "1",
                "2",
                "3"
            ],
            "properties": {
                "sku": {
                    "name": "Standard_v2",
                    "tier": "Standard_v2"
                },
                "gatewayIPConfigurations": [
                    {
                        "name": "appGatewayIpConfig",
                        "properties": {
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ],
                "sslCertificates": [
                    {
                        "name": "[parameters('certificationCN')]",
                        "properties": {
                            "data": "[parameters('certificationData')]",
                            "password": "[parameters('certificationPassword')]"
                        }
                    }
                ],
                "trustedRootCertificates": [],
                "trustedClientCertificates": [],
                "sslProfiles": [],
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('applicationGatewayFrontIPName')]",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName'))]"
                            }
                        }
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "[variables('applicationGatewayFrontPortName')]",
                        "properties": {
                            "port": 443
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('applicationGatewayBackendAddressPoolName')]",
                        "properties": {
                            "backendAddresses": [
                                {
                                    "fqdn": "[concat(variables('storageAccountName01'),'.blob.core.windows.net')]"
                                },
                                {
                                    "fqdn": "[concat(variables('storageAccountName02'),'.blob.core.windows.net')]"
                                }
                            ]
                        }
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "[variables('applicationGatewayBackendHTTPSettingName')]",
                        "properties": {
                            "port": 443,
                            "protocol": "Https",
                            "cookieBasedAffinity": "Disabled",
                            "pickHostNameFromBackendAddress": true,
                            "affinityCookieName": "ApplicationGatewayAffinity",
                            "requestTimeout": 20
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "[variables('applicationGatewayListenerName')]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/frontendIPConfigurations/',variables('applicationGatewayFrontIPName'))]"
                            },
                            "frontendPort": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/frontendPorts/',variables('applicationGatewayFrontPortName'))]"
                            },
                            "protocol": "Https",
                            "sslCertificate": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/sslCertificates/',parameters('certificationCN'))]"
                            },
                            "hostName": "[parameters('certificationCN')]",
                            "hostNames": [],
                            "requireServerNameIndication": true
                        }
                    }
                ],
                "urlPathMaps": [],
                "requestRoutingRules": [
                    {
                        "name": "[variables('applicationGatewayRoutingRuleName')]",
                        "properties": {
                            "ruleType": "Basic",
                            "httpListener": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/httpListeners/', variables('applicationGatewayListenerName'))]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/backendAddressPools/',variables('applicationGatewayBackendAddressPoolName'))]"
                            },
                            "backendHttpSettings": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/backendHttpSettingsCollection/',variables('applicationGatewayBackendHTTPSettingName'))]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "[variables('applicationGatewayProbeName')]",
                        "properties": {
                            "protocol": "Https",
                            "path": "[concat('/',parameters('containerName'))]",
                            "interval": 30,
                            "timeout": 30,
                            "unhealthyThreshold": 3,
                            "pickHostNameFromBackendHttpSettings": true,
                            "minServers": 0,
                            "match": {
                                "statusCodes": [
                                    "404"
                                ]
                            }
                        }
                    }
                ],
                "rewriteRuleSets": [],
                "redirectConfigurations": [],
                "privateLinkConfigurations": [],
                "enableHttp2": false,
                "autoscaleConfiguration": {
                    "minCapacity": 1,
                    "maxCapacity": 125
                }
            }
        }
    ]
}